/*Ten program pobiera próbki z lewego i prawego kana³u, a nastêpnie filtruje lewy kana³ a prawy przepuszcza bez filtracji*/
#include "C6713_DSK_FIRcfg.h"

#define CHIP_6713 1

/* Biblioteki p³ytki DSK6713, kodeka audio, prze³¹czników i diód */
// wszystkie funkcje kodeka w biblitece dsk6713_aic23.h
#include "dsk6713.h"
#include "dsk6713_aic23.h"
#include "dsk6713_dip.h"
#include "dsk6713_led.h"

short FILTR_L (short, short*);//DEKLARACJE FUNKCJI ZWRACAJACE WARTOSC short 
							  //I POBIERAJACYCH 2 ARGUMENTY (short, wskaznik)
short FILTR_R (short, short*);

/* USTAWIENIA KONFIGURACYJNE KODEKA*/
DSK6713_AIC23_Config config = { // normal mode line in, mic off
    0x0017, // 0 DSK6713_AIC23_LEFTINVOL  Glosnosc wejscia lewego kanalu 
    0x0017, // 1 DSK6713_AIC23_RIGHTINVOL Glosnosc wejscia prawego kanalu
    0x00F9, // 2 DSK6713_AIC23_LEFTHPVOL  Glosnosc lewego kanalu sluchawek
    0x00F9, // 3 DSK6713_AIC23_RIGHTHPVOL Glosnosc prawego kanalu sluchawek
    0x0012, // 4 DSK6713_AIC23_ANAPATH    kontrola  analogowej sciezki audio 
    0x0000, // 5 DSK6713_AIC23_DIGPATH    kontrola cyfrowej sciezki audio 
    0x0002, // 6 DSK6713_AIC23_POWERDOWN  kontrola w³¹czonych urz¹dzeñ
    0x0043, // 7 DSK6713_AIC23_DIGIF      format interfejsu cyfrowego dzwieku
    0x0023, // 8 DSK6713_AIC23_SAMPLERATE kontrola czestotliwosci probkowania
    0x0001  // 9 DSK6713_AIC23_DIGACT     aktywacja cyfrowego interfejsu
};

short L_in[101]; 		/* PRÓBKI WEJSIOWE L_in[0] NAJNOWSZA PRÓBKA LEWA,L_in[127] NAJSTARSZA PRÓBKA LEWA*/
short R_in[101];
/* WSPÓ£CZYNNIKI WYLICZONE Z CZÊSTOTLIWOŒCI¥ PRÓBKOWANIA 48kHz I ODCIÊCIE DLA 4kHz*/
short h1[]=       		
      {
        0,      0,      0,      0,      1,      2,      4,      7,     11,
       16,     22,     28,     36,     44,     53,     61,     69,     76,
       81,     84,     85,     82,     76,     65,     49,     27,      0,
      -33,    -73,   -119,   -171,   -229,   -292,   -361,   -434,   -510,
     -589,   -670,   -751,   -832,   -911,   -987,  -1059,  -1126,  -1186,
    -1239,  -1283,  -1319,  -1344,  -1360,  31403,  -1360,  -1344,  -1319,
    -1283,  -1239,  -1186,  -1126,  -1059,   -987,   -911,   -832,   -751,
     -670,   -589,   -510,   -434,   -361,   -292,   -229,   -171,   -119,
      -73,    -33,      0,     27,     49,     65,     76,     82,     85,
       84,     81,     76,     69,     61,     53,     44,     36,     28,
       22,     16,     11,      7,      4,      2,      1,      0,      0,
        0,      0
};

void main()
{
    DSK6713_AIC23_CodecHandle hCodec;
    Int16 OUT_L, OUT_R;
    Uint32 IN_L, IN_R;
 	
        /* INICJALIZACJA BIBLIOTEK */
    DSK6713_init();
    DSK6713_LED_init();
    DSK6713_DIP_init();
     
    /* W£¥CZENIE KODEKA Z USTAWIENIAMI config */
    hCodec = DSK6713_AIC23_openCodec(0, &config);

	// USTAWIA CZÊSTOTLIWOŒÆ KODEKA NA 44KHz 
	DSK6713_AIC23_setFreq(hCodec, DSK6713_AIC23_FREQ_32KHZ );
	
//unsigned char przycisk;
	while (1)	
	{
   
            // CZYTAJ PRÓBKÊ Z LEWEGO KANA£U
        while (!DSK6713_AIC23_read(hCodec, &IN_L));

            // CZYTAJ PRÓBKÊ Z PRAWEGO KANA£U
        while (!DSK6713_AIC23_read(hCodec, &IN_R));


		if(!DSK6713_DIP_get(0)==1) {  // SW0 tylko FILTR L   	
        OUT_L=FILTR_L(IN_L, h1);
		OUT_R=0;

		} 

        else if(!DSK6713_DIP_get(1)==1) {  //SW1 FILTR on/off
        OUT_L=FILTR_L(IN_L, h1);            
        OUT_R=FILTR_R(IN_R, h1);
		} 
			
		else if(!DSK6713_DIP_get(2)==1) {  // SW2 mute L&R
        
        OUT_R = 0;
		OUT_L = 0;
		} 

		else{					 
		OUT_L=IN_L;            
        OUT_R=IN_R;}
 	
            /* WYŒLIJ PRÓBKÊ DO LEWEGO KANA£U */
         while (!DSK6713_AIC23_write(hCodec, OUT_L));

            /* WYŒLIJ PRÓBKÊ DO PRAWEGO KANA£U */
         while (!DSK6713_AIC23_write(hCodec, OUT_R));
 
   	}  

 	/* WY£¥CZ KODEK */
    DSK6713_AIC23_closeCodec(hCodec);  
}

short FILTR_L (short input, short *h)
{
	int i;
	short output;
	int acc=0;
	int prod;
	L_in[0] = input;         	// Odœwie¿a najnowsza próbkê 

	acc = 0;                      	
	for (i=0; i<101; i++)         	 
	{   
		prod = (h[i]*L_in[i]);   
		acc = acc + prod;       // Odœwie¿anie akumulatora 
	}                             	
	output = (short) (acc>>15);    	// Przerabianie wyjœcia do 16 bit 

	for (i=100; i>0; i--)         	// Przesuniêcie próbek 
		L_in[i]=L_in[i-1];

	return output;			
}

short FILTR_R (short input, short *h)
{
	int i;
	short output;
	int acc=0;
	int prod;
	R_in[0] = input;         	// Odœwie¿a najnowsza próbkê 

	acc = 0;                      	
	for (i=0; i<101; i++)         	 
	{   
		prod = (h[i]*R_in[i]);   
		acc = acc + prod;       // Odœwie¿anie akumulatora 
	}                             	
	output = (short) (acc>>15);    	// Przerabianie wyjœcia do 16 bit 

	for (i=100; i>0; i--)         	// Przesuniêcie próbek 
		R_in[i]=R_in[i-1];

	return output;